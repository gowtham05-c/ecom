generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    slug        String   @unique(map: "product_slug_idx")
    category    String
    images      String[]
    brand       String
    description String
    stock       Int
    price       Decimal  @default(0) @db.Decimal(12, 2)
    rating      Decimal  @default(0) @db.Decimal(3, 2)
    numReviews  Int      @default(0)
    isFeatured  Boolean
    banner      String?
    createdAt   DateTime @default(now()) @db.Timestamp(6)
}

model User {
    id            String    @id @default(cuid())
    name          String?   @default("No_Name")
    email         String?   @unique(map: "user_email_idx")
    emailVerified DateTime? @map("email_verified") @db.Timestamp(6)
    image         String?
    password      String?
    role          String    @default("user")
    address       Json?     @db.Json
    paymentMethod String?
    accounts      Account[]
    sessions      Session[]
    cart          Cart[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@map("users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Cart {
    id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId        String   @map("user_id")
    sessionCartId String
    items         Json[]   @default([]) @db.Json
    itemsPrice    Decimal  @db.Decimal(12, 2)
    totalPrice    Decimal  @db.Decimal(12, 2)
    shippingPrice Decimal  @db.Decimal(12, 2)
    taxPrice      Decimal  @db.Decimal(12, 2)
    createdAt     DateTime @default(now()) @db.Timestamp(6)
    user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
